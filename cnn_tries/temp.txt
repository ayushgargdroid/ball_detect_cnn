layer_conv1, weights_conv1 = new_conv_layer(input=x,num_input_channels=num_channels,filter_size=filter_size1,num_filters=num_filters1,use_pooling=True)
layer_conv2, weights_conv2 = new_conv_layer(input=layer_conv1,num_input_channels=num_filters1,filter_size=filter_size2,num_filters=num_filters2,use_pooling=True)
layer_conv3, weights_conv3 = new_conv_layer(input=layer_conv2,num_input_channels=num_filters2,filter_size=filter_size3,num_filters=num_filters3,use_pooling=True)
layer_conv4, weights_conv4 = new_conv_layer(input=layer_conv3,num_input_channels=num_filters3,filter_size=filter_size4,num_filters=num_filters4,use_pooling=True)
layer_conv5, weights_conv5 = new_conv_layer(input=layer_conv4,num_input_channels=num_filters4,filter_size=filter_size5,num_filters=num_filters5,use_pooling=True)
layer_flat, num_features = flatten_layer(layer_conv5)
layer_fc1 = new_fc_layer(input=layer_flat,num_inputs=num_features,num_outputs=fc_size1,use_relu=True)
layer_fc2 = new_fc_layer(input=layer_fc1,num_inputs=fc_size1,num_outputs=fc_size2,use_relu=True)
layer_fc3 = new_fc_layer(input=layer_fc2,num_inputs=fc_size2,num_outputs=num_classes,use_relu=False)
y_pred = tf.nn.softmax(layer_fc2)
y_pred_cls = tf.argmax(y_pred, axis=1)

filter_size1 = 5          
num_filters1 = 32

# Convolutional Layer 2.
filter_size2 = 5        
num_filters2 = 32

# Convolutional Layer 3.
filter_size3 = 5        
num_filters3 = 64

# Convolutional Layer 4.
filter_size4 = 5        
num_filters4 = 64

# Convolutional Layer 5.
filter_size5 = 5        
num_filters5 = 128       

# Fully-connected layer.
fc_size1 = 256
fc_size2 = 256